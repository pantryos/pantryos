// Package main provides the entry point for the PantryOS inventory management API
// This is a multi-tenant backend system for managing inventory, menu items,
// and organizational structures for coffee shops and restaurants.
package main

import (
	"fmt"
	"github.com/gin-contrib/cors"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/mnadev/pantryos/internal/api"
	"github.com/mnadev/pantryos/internal/database"
	"github.com/mnadev/pantryos/internal/scheduler"

	"github.com/gin-gonic/gin"
	_ "github.com/mnadev/pantryos/docs" // This will be generated by swag
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title           PantryOS Inventory Management API
// @version         1.0
// @description     A comprehensive inventory management system for coffee shops and restaurants
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	db, err := database.Initialize()
	if err != nil {
		log.Fatalf("Could not initialize database: %v", err)
	}

	router := gin.Default()

	router.Use(cors.New(cors.Config{
		AllowAllOrigins:  true, // DANGEROUS: For development only. In production, use AllowedOrigins.
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	api.SetupRouter(router, db)

	emailScheduler := scheduler.NewScheduler(db)
	emailScheduler.Start()

	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	router.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"status": "ok"})
	})

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		fmt.Printf("Starting server on port %s\n", port)
		fmt.Printf("Swagger documentation available at: http://localhost:%s/swagger/index.html\n", port)
		if err := router.Run(":" + port); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Failed to run server: %v", err)
		}
	}()

	<-quit
	log.Println("Shutting down server...")
	emailScheduler.Stop()
	log.Println("Server stopped")
}
