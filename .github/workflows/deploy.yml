name: CI/CD for pantryos staging

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GO_VERSION: '1.23'
  APP_NAME: pantryos
  DOCKER_IMAGE_NAME_BE: pantryos-be
  DIGITALOCEAN_REGISTRY: registry.digitalocean.com/pantryos-image

jobs:
#  tests:
#    name: Run Tests
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      # --- Backend tests
#      - name: Set up Go
#        uses: actions/setup-go@v5
#        with:
#          go-version: ${{ env.GO_VERSION }}
#          cache: false
#
#      - name: Backend - Download Go modules
#        run: go mod download
#
#      - name: Backend - Run Go unit tests
#        run: go test ./... -v

  build:
    name: Build Backend
#    needs: tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DIGITALOCEAN_REGISTRY }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      # --- Build Backend Only
      - name: Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME_BE }}:v1.0.0
            ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME_BE }}:latest

  deploy:
    name: Deploy Backend
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Prepare .env content
        id: env_content
        run: |
          ENV_VARS_RAW=$(cat <<EOF
          USE_RAMSQL=${{ secrets.USE_RAMSQL }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_SSLMODE=${{ secrets.DB_SSLMODE }}
          ACCESS_SECRET=${{ secrets.ACCESS_SECRET }}
          REFRESH_SECRET=${{ secrets.REFRESH_SECRET }}
          ACCESS_EXPIRATION=${{ secrets.ACCESS_EXPIRATION }}
          REFRESH_EXPIRATION=${{ secrets.REFRESH_EXPIRATION }}
          EOF
          )
          echo "ENV_FILE_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$ENV_VARS_RAW" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Deploy to Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login ${{ env.DIGITALOCEAN_REGISTRY }} --username ${{ secrets.DIGITALOCEAN_USERNAME }} --password-stdin

            # Pull latest backend image
            docker pull ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME_BE }}:latest

            # Stop old container
            docker rm -f pantryos-backend || true

            # Write .env file on droplet
            cat << 'EOF_ENV' > /home/${{ secrets.DROPLET_USERNAME }}/.env
            ${{ steps.env_content.outputs.ENV_FILE_CONTENT }}
            EOF_ENV

            # Run backend
            docker run -d \
              --name pantryos-backend \
              --restart unless-stopped \
              --env-file /home/${{ secrets.DROPLET_USERNAME }}/.env \
              -p 127.0.0.1:8081:8081 \
              ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME_BE }}:latest

            echo "Backend deployment complete!"
