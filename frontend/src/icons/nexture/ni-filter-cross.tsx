import { NextureIconsProps, sizeHelper, strokeSizeHelper } from "../nexture-icons";

export default function NiFilterCross({
  className,
  variant = "outlined",
  size = "medium",
  oneTone = false,
}: NextureIconsProps) {
  const iconSize = sizeHelper(size);
  const iconStrokeWidth = strokeSizeHelper(iconSize);

  if (variant === "outlined") {
    return (
      <svg
        width={iconSize}
        height={iconSize}
        className={className}
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M4 4.70802C4 3.71766 4.70537 2.86774 5.67877 2.68523V2.68523C9.85652 1.9019 14.1435 1.9019 18.3212 2.68523V2.68523C19.2946 2.86774 20 3.71766 20 4.70802V6.96241C20 7.6346 19.7742 8.28732 19.359 8.81588L14.9274 14.4561C14.6505 14.8085 14.5 15.2436 14.5 15.6917V18.8676C14.5 19.5701 14.1314 20.2212 13.529 20.5826L11.7717 21.637C10.772 22.2368 9.5 21.5167 9.5 20.3507V15.6917C9.5 15.2436 9.3495 14.8085 9.07264 14.4561L4.64104 8.81587C4.22575 8.28732 4 7.6346 4 6.96241V4.70802Z"
          stroke="currentColor"
          strokeWidth={iconStrokeWidth}
        />
        <path
          opacity={oneTone ? 1 : 0.6}
          d="M10 6.00001L14.0001 10.0001M14 6.00001L9.99992 10.0001"
          stroke="currentColor"
          strokeWidth={iconStrokeWidth}
          strokeLinecap="round"
        />
      </svg>
    );
  } else {
    return (
      <svg
        width={iconSize}
        height={iconSize}
        className={className}
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M5.54102 1.94853C9.80985 1.14818 14.1902 1.14818 18.459 1.94853C19.7871 2.19758 20.75 3.35705 20.75 4.7083V6.96318C20.7498 7.80313 20.4672 8.61911 19.9482 9.27959L15.5176 14.9202C15.3447 15.1403 15.2501 15.4118 15.25 15.6917V18.8675C15.2499 19.8332 14.7431 20.7289 13.915 21.2259L12.1572 22.2806C10.6577 23.1797 8.75026 22.0994 8.75 20.3509V15.6917C8.74993 15.4118 8.65526 15.1403 8.48242 14.9202L4.05176 9.27959C3.53281 8.61911 3.25019 7.80313 3.25 6.96318V4.7083C3.25001 3.35705 4.21293 2.19758 5.54102 1.94853ZM14.5303 5.46904C14.2375 5.17657 13.7625 5.17657 13.4697 5.46904L12 6.93877L10.5303 5.46904C10.2375 5.17657 9.76254 5.17657 9.46973 5.46904C9.17694 5.76182 9.17716 6.23667 9.46973 6.52959L10.9395 7.99931L9.46875 9.47002C9.17653 9.76284 9.17638 10.2378 9.46875 10.5306C9.76158 10.8234 10.2374 10.8233 10.5303 10.5306L12 9.05986L13.4697 10.5306L13.5264 10.5813C13.8209 10.8218 14.2566 10.8052 14.5312 10.5306C14.8055 10.256 14.8222 9.82112 14.582 9.52666L14.5312 9.47002L13.0605 7.99931L14.5303 6.52959C14.8228 6.23667 14.8231 5.76182 14.5303 5.46904Z"
          fill="currentColor"
        />
        <path
          opacity={oneTone ? 0 : 0.4}
          d="M9.4692 9.46973L10.9393 7.99958L9.46989 6.53012C9.177 6.23722 9.177 5.76235 9.46989 5.46945C9.7628 5.17678 10.2377 5.17663 10.5305 5.46945L12 6.93891L13.4695 5.46945C13.7623 5.17663 14.2372 5.17678 14.5301 5.46945C14.823 5.76235 14.823 6.23722 14.5301 6.53012L13.0607 7.99958L14.5308 9.46973L14.5819 9.52635C14.8223 9.82086 14.8052 10.2557 14.5308 10.5304C14.2562 10.805 13.8213 10.8219 13.5268 10.5815L13.4701 10.5304L12 9.06024L10.5299 10.5304C10.237 10.8231 9.76203 10.8232 9.4692 10.5304C9.17658 10.2375 9.17655 9.76256 9.4692 9.46973Z"
          fill="currentColor"
        />
      </svg>
    );
  }
}
